
./examples/simple.hs,276
module Main Main1,2
data Expr Expr6,7
data Expr v = Num Num6,7
data Expr v = Num Int | Var Var6,7
data Expr v = Num Int | Var v | Expr Expr6,7
data Expr v = Num Int | Var v | Expr v :+ Expr v | Neg Neg6,7
instance instance13,14
main main24,25
main main25,26

./Setup.hs,15
main main1,2

./src/Data/Unification/Generic.hs,1423
module Data.Unification.GenericData.Unification.Generic4,5
data UnificationStatus UnificationStatus23,24
  Success Success24,25
  Success (f a) (Map a (f a))  | Failed Failed24,25
data UnificationError UnificationError27,28
data UnificationError f a = OccursCheck OccursCheck27,28
type Term Term29,30
newtype Var Var31,32
  Var Var32,33
  Var { runVar runVar32,33
class Traversable f => HasVar HasVar39,40
  default takeVar :: (Generic1 f, GHasVar (Rep1 f)) => f f44,45
  takeVar takeVar42,43
  takeVar takeVar45,46
class GHasVar GHasVar47,48
class GHasVar GHasVar47,48
  gTakeVar gTakeVar48,49
instance instance50,51
activateVars activateVars75,76
activateVars activateVars76,77
abstractOrd abstractOrd82,83
abstractOrd abstractOrd85,86
retrieve retrieve94,95
retrieve retrieve98,99
class Functor f => Unifiable Unifiable107,108
                => f f111,112
  unify unify108,109
  unify unify112,113
unifyOrd unifyOrd114,115
unifyOrd unifyOrd116,117
class (Functor f, Functor c) => GUnify GUnify124,125
class (Functor f, Functor c) => GUnify GUnify124,125
  gunify gunify125,126
occurs occurs160,161
occurs occurs161,162
readVar readVar163,164
readVar readVar164,165
assign assign166,167
assign assign167,168
equate equate169,170
equate equate170,171
equiv equiv172,173
equiv equiv173,174
unify' unify'175,176
unify' unify'179,180

./test/Spec.hs,30
main main0,1
main main1,2
